import argparse

parser = argparse.ArgumentParser(prog="generate_ast", description="generates the AST")
parser.add_argument("filename")
args = parser.parse_args()
filename = args.filename

expr_classes = [
    ("BinaryExpr",   (("Expr", "left"), ("Token", "operator"), ("Expr", "right")),),
    ("GroupingExpr", (("Expr", "expression"),),                                   ),
    ("LiteralExpr",  (("object", "value"),),                                      ),
    ("UnaryExpr",    (("Token", "operator"), ("Expr", "right")),                  ),
]

def camel_case(s):
    return "".join(["_" + c.lower() if c.isupper() else c for c in s]).lstrip("_")

result = ["# AUTOGENERATED"]
result.append("from dataclasses import dataclass")
result.append("from .tokenizer import Token")

# generate visitor interface
result.append(    f"")
result.append(    f"class VisitorInterface:")
for classname, _ in expr_classes:
    result.append(f"    def accept_{camel_case(classname)}(self, expr: '{classname}'):")
    result.append(f"        assert(0)  # must be implemented")

# generate dataclasses
result.append("")
result.append("@dataclass")
result.append("class Expr:")
result.append("    def accept(self, visitor: VisitorInterface):")
result.append("        assert(0)  # not implemented for bare Expr")

for classname, members in expr_classes:
    result.append(    f"")
    result.append(    f"@dataclass")
    result.append(    f"class {classname}(Expr):")
    for member in members:
        result.append(f"    {member[1]}: {member[0]}")
    result.append(    f"    def accept(self, visitor: VisitorInterface):")
    result.append(    f"        return visitor.accept_{camel_case(classname)}(self)")

with open(filename, "w") as file:
    file.write("\n".join(result))
